/* main.cpp
*
*  MIT License
*
*  Copyright (c) 2024 awawa-dev
*
*  https://github.com/awawa-dev/HyperSerialEsp8266
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.

*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
 */

#include <Arduino.h>
#include <NeoPixelBus.h>

///////////////////////////////////////////////////////////////////////////
// DO NOT EDIT THIS FILE. ADJUST THE CONFIGURATION IN THE platformio.ini //
///////////////////////////////////////////////////////////////////////////

#define _STR(x) #x
#define _XSTR(x) _STR(x)
#define VAR_NAME_VALUE(var) #var " = " _XSTR(var)
#define _XSTR2(x,y) _STR(x) _STR(y)
#define VAR_NAME_VALUE2(var) #var " = " _XSTR2(var)

#ifdef CLEAR_LEDS
	#pragma message(VAR_NAME_VALUE(CLEAR_LEDS))
#endif
#ifdef NEOPIXEL_RGBW
	#pragma message(VAR_NAME_VALUE(NEOPIXEL_RGBW))
#endif
#ifdef NEOPIXEL_RGB
	#pragma message(VAR_NAME_VALUE(NEOPIXEL_RGB))
#endif
#ifdef SPILED_APA102
	#pragma message(VAR_NAME_VALUE(SPILED_APA102))
#endif
#ifdef SPILED_WS2801
	#pragma message(VAR_NAME_VALUE(SPILED_WS2801))
#endif
#pragma message(VAR_NAME_VALUE(SERIALCOM_SPEED))

#if NEOPIXEL_RGB || NEOPIXEL_RGBW
    #define NEO_METHOD NeoWs2812xMethod
    #if NEOPIXEL_RGB
        #define NEO_FEATURE NeoGrbFeature
    #elif NEOPIXEL_RGBW
        #define NEO_FEATURE NeoGrbwFeature
    #endif
#endif

#if defined(NEO_METHOD) && defined(NEO_FEATURE)
    #define LED_DRIVER NeoPixelBus<NEO_FEATURE, NEO_METHOD>
#else
    #error "Unknown LED type"
#endif

#pragma message(VAR_NAME_VALUE2(LED_DRIVER))

#define SerialPort Serial
#include "main.h"

void setup()
{
	// Init serial port
	Serial.begin(SERIALCOM_SPEED);
	while (!Serial) continue;

#ifdef CLEAR_LEDS
	LED_DRIVER* _ledStrip = new LED_DRIVER(CLEAR_LEDS, LED_PIN);
	ColorDefinition _black(0);
	_ledStrip->Begin();
	for(int i = 0; i < CLEAR_LEDS; i++)
		_ledStrip->SetPixelColor(i, _black);
	_ledStrip->Dirty();
	_ledStrip->Show(false);
	delay(10);
	delete _ledStrip;
#endif

	// Display config
	Serial.println(HELLO_MESSAGE);
    
    #if defined(NEO_METHOD) && defined(NEO_FEATURE)
        Serial.print("NeoPixelBus Ws2812x ");
        #if NEOPIXEL_RGB
            Serial.println("GRB.");
        #elif NEOPIXEL_RGBW
            #if COLD_WHITE
                calibrationConfig.setParamsAndPrepareCalibration(0xFF, 0xA0, 0xA0, 0xA0);
                Serial.println("cold GRBW");
            #else
                calibrationConfig.setParamsAndPrepareCalibration(0xFF, 0xB0, 0xB0, 0x70);
                Serial.println("neutral GRBW");
            #endif
            calibrationConfig.printCalibration();
        #endif
    #endif

	Serial.flush();
	delay(50);
}

void loop()
{
	serialTaskHandler();
	processData();
}
